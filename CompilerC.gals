#Options
GenerateScanner = true
GenerateParser = true
Language = C++
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = SLR
#RegularDefinitions
LETTER: [A-Za-z]
UNDERSCORE: [_]
INTEGER_KEY: int
NUMBER: [0-9]
CHARACTER: [^\"]
OTHERS:[\ \n\r\t]
BAR : "/"
COMMENTS: ({BAR}{BAR}[^\n\r]*)
MULTILINE_COMMENT: /\*([^\*]|[\r\n]|(\*+([^\*/]|[\r\n])))*\*+/
#Tokens
BOOLEAN_VALUE: (true|false)

ID: {LETTER} ( {LETTER} | {NUMBER} | {UNDERSCORE} )*


/// PALAVRAS RESERVADAS
USING = ID : "using"
CONST = ID : "const"
BREAK = ID : "break"
RETURN = ID : "return"
COUT = ID : "cout"
CIN = ID : "cin"
DEFAULT = ID : "default"
CONTINUE = ID : "continue"
PRINTF = ID : "printf"
SCANF = ID : "scanf"
FUNCTION = ID : "function"

/// IMPORTS
IMPORT = ID : "import"
// Types
INT = ID : "int"
FLOAT = ID : "float"
CHAR = ID: "char"
STRING = ID : "string"
BOOL= ID : "bool"
DOUBLE = ID : "double"

// Functions
VOID = ID : "void"
MAIN = ID: "main"

// Conditionals
IF = ID : "if"
ELSE = ID : "else"
SWITCH = ID : "switch"
CASE = ID : "case"


// Looping
FOR = ID : "for"
WHILE = ID : "while"
DO = ID : "do"

// Comparision
OR : "||"
AND : "&&"
MAIOR : ">"
MENOR : "<" 
MENOR_IGUAL: "<="
MAIOR_IGUAL : ">="

/// Operators
MAIS : "+"
MENOS : "-"
DIVISAO : "/"
MOD : "%"
MULTIPLICACAO : "*"
ATRIBUICAO : "="
IGUAL : "=="
INVERTER : "!"
DIFERENTE : "!=" | "<>"

// BITWISE OPERATORS

RIGHTSHIFT: ">>"
LEFTSHIFT : "<<"
BITWISE_AND : "&"
BITWISE_OR : "|"
BITWISE_NOT : "~"
BITWISE_XOR : "^"

// DELIMITADORES

PONTO: "."
VIRGULA: ","
DOIS_PONTOS: ":"
PONTO_E_VIRGULA: ";"
ABRIR_COLCHETES : "["
FECHAR_COLCHETES : "]"
ABRIR_PARENTESES: "(" 
FECHAR_PARENTESES: ")"
ABRIR_CHAVES: "{"
FECHAR_CHAVES: "}"
CONTRABARRA: "\"
INTERROGACAO: "?"


// VALUES


INT_VALUE: {NUMBER}+
FLOAT_VALUE : {NUMBER}+ \. {NUMBER}+f
DOUBLE_VALUE : {NUMBER}+ \. {NUMBER}+
BIN_VALUE : 0b[01]+
HEX_VALUE : 0x[0-9A-Fa-f]+
STRING_VALUE : \"( [^\"]  ) *\"
CHAR_VALUE: '( {LETTER} | {NUMBER} | {UNDERSCORE} | {OTHERS} | {CHARACTER} ) '

:{OTHERS}*

: {COMMENTS}
: {MULTILINE_COMMENT}
#NonTerminals
<prog>
<main>
<lista_cmd>
<cmd>
<declarar_var>
<declarar_function>
<lacos_repeticao>
<declarar_desvio>
<declarar_vetor>
<tipo>
<atribuicao_variavel>
<atribuicao>
<expressao_aritmetica>
<termo>
<lista_termo>
<operador_aritmetico>
<lista_ids>
<declarar_vetor_multi>
<vetor>
<escopo>
<laco_while>
<laco_do_while>
<laco_for>
<condicao_for>
<mais_menos_um>
<sub_um>
<soma_um>
<if>
<if_else>
<in_out>
<cin>
<cin_mult>
<cout>
<cout_multi>
<parametros>
<return>
<chamar_function>
<logicos>
<ponteiro>
<printf>
<scanf>
<exp>
<exp0>
<exp1>
<exp2>
<exp3>
<exp4>
<exp5>
<exp6>
<exp7>
<exp8>
<exp9>
<exp10>
<op_rel>
<op_neg>
<op_bitwise>
<op_arit_baixa>
<op_arit_alta>
<op_arit_mais_alta>
<parametro>
<lista_parametros>
<ponteiros>
<vetor_parametro>
<atribuir_multi>
<saidas>
<vetor_exp>
#Grammar
<prog> ::= INT MAIN ABRIR_PARENTESES FECHAR_PARENTESES ABRIR_CHAVES #10 <lista_cmd> #20 FECHAR_CHAVES | <declarar_function> <escopo><prog> | <declarar_var><prog>;

<lista_cmd> ::= <lista_cmd> <cmd> | <cmd>; //<return>;

<cmd>::= <declarar_var> |<atribuicao_variavel> PONTO_E_VIRGULA |<declarar_function> <escopo> | <lacos_repeticao> | <declarar_desvio> | <escopo> | <in_out> | <chamar_function> #33 PONTO_E_VIRGULA | <return>;

<lista_ids>::= <lista_ids> VIRGULA ID #2 | ID #2;

<atribuir_multi> ::= VIRGULA <lista_ids> ATRIBUICAO <exp> #6 #51 #19 | VIRGULA <lista_ids> ATRIBUICAO <exp> #6 #51 #19 <atribuir_multi> | VIRGULA <lista_ids>;

<declarar_var>::= <tipo> <lista_ids> PONTO_E_VIRGULA | <tipo> <lista_ids> ATRIBUICAO <exp> #6 #51 #19 PONTO_E_VIRGULA | <tipo> <lista_ids> ATRIBUICAO <exp> #6 #51 #19 <atribuir_multi> PONTO_E_VIRGULA
		| <ponteiros> PONTO_E_VIRGULA |<declarar_vetor>  PONTO_E_VIRGULA
	         |<declarar_vetor> VIRGULA <lista_ids> PONTO_E_VIRGULA | <declarar_vetor> VIRGULA <declarar_vetor_multi> PONTO_E_VIRGULA;// | <tipo> ID #2 ATRIBUICAO <chamar_function> PONTO_E_VIRGULA;

<tipo>::= BOOL #1 | INT #1 | CHAR #1 | STRING #1 | FLOAT #1 | DOUBLE #1;

<atribuicao_variavel> ::=  ID #4 ATRIBUICAO <chamar_function> #17 | ID #4 ATRIBUICAO <exp> #16 | <mais_menos_um> | <vetor> ATRIBUICAO <exp> #16 | <atribuicao> | <vetor> ATRIBUICAO <chamar_function> #17;

<ponteiros>::=  <tipo> MULTIPLICACAO <lista_ids>;
<ponteiro> ::= <tipo> MULTIPLICACAO ID;

<mais_menos_um>::= <sub_um> | <soma_um>;
<sub_um>::= ID #5 MENOS MENOS;
<soma_um>::= ID #5 MAIS MAIS;

<atribuicao>::= ID #5 <op_arit_baixa> ATRIBUICAO <exp>; // | ID <op_arit_alta> ATRIBUICAO<exp> ;

//<exp>  ::= <exp> ATRIBUICAO <exp0> | <exp0>;
<exp> ::= <exp> OR #45 <exp1> | <exp1>;
<exp1> ::= <exp1> AND #45 <exp2> | <exp2>;
<exp2> ::= <exp2> BITWISE_OR <exp3> | <exp3>;
<exp3> ::= <exp3> BITWISE_XOR <exp4> | <exp4>;
<exp4> ::= <exp4> BITWISE_AND <exp5> | <exp5>;
<exp5> ::= <exp5> <op_rel> #45 <exp6> | <exp6>;
<exp6> ::= <exp6> <op_bitwise> <exp7> | <exp7>;
<exp7> ::= <exp7> <op_arit_baixa> <exp8> | <exp8>;
<exp8> ::= <exp8> <op_arit_alta> <exp9> | <exp9> ;
<exp9> ::= <op_neg> #46 <exp10> | <exp10> ;
<exp10> ::= <termo> | ABRIR_PARENTESES #47 <exp> FECHAR_PARENTESES;

<termo> ::= ID #3 | INT_VALUE #31 | FLOAT_VALUE #32 | DOUBLE_VALUE #33 | CHAR_VALUE#34 | STRING_VALUE#35 | BOOLEAN_VALUE #36 | <vetor_exp>;// | <chamar_function>;

<vetor_exp> ::= ID #3 ABRIR_COLCHETES <exp> FECHAR_COLCHETES;

<lista_termo>::= <termo> | <lista_termo> VIRGULA <termo>;

<op_rel> ::= MAIOR | MENOR | MENOR_IGUAL | MAIOR_IGUAL | IGUAL | DIFERENTE; 
<op_neg> ::= BITWISE_NOT | INVERTER;
<op_bitwise> ::= RIGHTSHIFT | LEFTSHIFT;
<op_arit_baixa> ::= MAIS #40 | MENOS #41;
<op_arit_alta> ::= MULTIPLICACAO #42 | DIVISAO #43 | MOD #44;

<declarar_vetor>::= <tipo> <lista_ids> ABRIR_COLCHETES INT_VALUE #12 FECHAR_COLCHETES #9;
<declarar_vetor_multi>::=  <lista_ids> ABRIR_COLCHETES INT_VALUE #12 FECHAR_COLCHETES #9 |<lista_ids> ABRIR_COLCHETES INT_VALUE #12 FECHAR_COLCHETES#9 <declarar_vetor_multi> ;
<vetor>::= ID #4 ABRIR_COLCHETES <exp> #19 FECHAR_COLCHETES;

<vetor_parametro> ::= ID #2 ABRIR_COLCHETES FECHAR_COLCHETES #9 | ID #2 ABRIR_COLCHETES INT_VALUE #12 #19 FECHAR_COLCHETES #9;

//<vetor_io> ::= ID #5 ABRIR_COLCHETES <exp> #19 FECHAR_COLCHETES;

<escopo>::= ABRIR_CHAVES #10 <lista_cmd> FECHAR_CHAVES #11;
<lacos_repeticao>::= <laco_while> | <laco_do_while> | <laco_for>;
<laco_while>::= WHILE ABRIR_PARENTESES <exp> #19 FECHAR_PARENTESES <escopo>;
<laco_do_while>::= DO  <escopo> WHILE ABRIR_PARENTESES <exp> #19 FECHAR_PARENTESES PONTO_E_VIRGULA;
<laco_for>::= FOR ABRIR_PARENTESES <condicao_for> FECHAR_PARENTESES <escopo>;

<condicao_for>::= <declarar_var> <exp> #19 PONTO_E_VIRGULA <atribuicao_variavel> | <atribuicao_variavel> PONTO_E_VIRGULA <exp> #19 PONTO_E_VIRGULA <atribuicao_variavel>;

<declarar_desvio>::= <if> | <if_else>;
<if>::= IF ABRIR_PARENTESES <exp> #51 FECHAR_PARENTESES <escopo>;
<if_else>::= <if> ELSE <escopo> | <if> ELSE<declarar_desvio>;

<saidas> ::= STRING_VALUE | ID #21 | CHAR | <vetor> #14;

<in_out>::= <cin>  PONTO_E_VIRGULA | <cout> PONTO_E_VIRGULA | <printf> | <scanf>;
<cin>::= CIN RIGHTSHIFT <vetor> | CIN RIGHTSHIFT ID #5 | CIN RIGHTSHIFT <vetor> <cin_mult> | CIN RIGHTSHIFT ID #5<cin_mult>;
<cin_mult>::= RIGHTSHIFT <vetor> | RIGHTSHIFT <vetor> <cin_mult> | RIGHTSHIFT ID #5 | RIGHTSHIFT ID #5 <cin_mult>;
<cout>::= COUT LEFTSHIFT <saidas> |  COUT LEFTSHIFT <saidas> <cout_multi> ;
<cout_multi>::=  LEFTSHIFT <saidas> |  LEFTSHIFT <saidas> <cout_multi>;
<printf>::= PRINTF ABRIR_PARENTESES <lista_termo> FECHAR_PARENTESES PONTO_E_VIRGULA;
<scanf>::= SCANF ABRIR_PARENTESES<lista_termo> FECHAR_PARENTESES PONTO_E_VIRGULA;

<declarar_function>::= <tipo> ID #7 ABRIR_PARENTESES FECHAR_PARENTESES #8 | VOID #1 ID #7 ABRIR_PARENTESES FECHAR_PARENTESES #8;
<declarar_function>::= <tipo> ID #7 ABRIR_PARENTESES <lista_parametros> FECHAR_PARENTESES #8 | VOID #1 ID #7 ABRIR_PARENTESES <lista_parametros> FECHAR_PARENTESES #8;

<lista_parametros> ::= <parametro> | <parametro> VIRGULA <lista_parametros>;
<parametro> ::= <tipo> ID #2 | <tipo> <vetor_parametro> | <ponteiro>;

//<parametros>::= <tipo> ID | <tipo> ID VIRGULA <parametros> |  <tipo> <vetor> | <ponteiro>;

<return>::= RETURN <exp> PONTO_E_VIRGULA | RETURN PONTO_E_VIRGULA;
<chamar_function>::= ID #13 ABRIR_PARENTESES FECHAR_PARENTESES | ID #13 ABRIR_PARENTESES <lista_termo> FECHAR_PARENTESES;
